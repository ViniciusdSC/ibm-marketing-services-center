{"version":3,"sources":["../../src/actions/TicketAction.js"],"names":["create_ticket","req","description","body","user_id","initial_status","categories_id_list","text","then","response","categories","result","map","categorie","label","findAll","where","name","categorie_id","console","log","ticket_model","create","status_id","forEach","ticket_id","search_ticket","ticket_list","ticket","getStatus","join"],"mappings":";;;;;;AAAA;;AACA;;kBAEe;AACb,QAAMA,aAAN,CAAqBC,GAArB,EAA0B;AACxB,UAAMC,cAAcD,IAAIE,IAAJ,CAASD,WAA7B;AACA,UAAME,UAAUH,IAAIE,IAAJ,CAASC,OAAzB;AACA,UAAMC,iBAAiB,CAAvB;AACA,QAAIC,qBAAqB,EAAzB;;AAEA,QAAI,CAACJ,WAAL,EAAkB;AAChB,aAAO,uBAAP;AACD;;AAED,UAAM,2CAAQ;AACZK,YAAML;AADM,KAAR,EAGLM,IAHK,CAGA,MAAMC,QAAN,IAAkB;AACtB;AACA,YAAMC,aAAaD,SAASE,MAAT,CAAgBD,UAAhB,CAA2BE,GAA3B,CAA+BC,aAAaA,UAAUC,KAAtD,CAAnB;AACAR,2BAAqB,MAAM,yBAAkBS,OAAlB,CAA0B;AACnDC,eAAO;AACLC,gBAAMP;AADD;AAD4C,OAA1B,EAIxBE,GAJwB,CAIpBC,aAAaA,UAAUK,YAJH,CAA3B;AAKAC,cAAQC,GAAR,CAAY,oBAAZ,EAAkCd,kBAAlC;AACD,KAZK,CAAN;AAaA,UAAMe,eAAe,MAAM,sBAASC,MAAT,CAAgB;AACzClB,aADyC;AAEzCmB,iBAAWlB,cAF8B;AAGzCH;AAHyC,KAAhB,CAA3B;AAKA,UAAMI,mBAAmBkB,OAAnB,CAA2B,MAAMN,YAAN,IAAsB;AACrD,YAAM,gCAAmBI,MAAnB,CAA0B;AAC9BG,mBAAWJ,aAAaI,SADM;AAE9BP;AAF8B,OAA1B,CAAN;AAID,KALK,CAAN;;AAOA,WAAO,kCAAP;AACD,GArCY;AAsCb,QAAMQ,aAAN,CAAqBzB,GAArB,EAA0B;AACxB,UAAMG,UAAUH,IAAIE,IAAJ,CAASC,OAAzB;AACA,UAAMuB,cAAc,MAAM,sBAASZ,OAAT,CAAiB;AACzCC,aAAO;AACLZ;AADK;AADkC,KAAjB,EAIvBQ,GAJuB,CAInB,MAAMgB,MAAN,IACJ,GAAEA,OAAO1B,WAAY,MAAK,CAAC,MAAM0B,OAAOC,SAAP,EAAP,EAA2BZ,IAAK,QALnC,CAA1B;;AAQA,WAAOU,YAAYG,IAAZ,CAAiB,IAAjB,CAAP;AACD;AAjDY,C","file":"TicketAction.js","sourcesContent":["import { ticket, categorie as categorie_model, ticket_categorie } from '~/models';\nimport { analyze } from '~/services/naturalLanguageUnderstanding';\n\nexport default {\n  async create_ticket (req) {\n    const description = req.body.description;\n    const user_id = req.body.user_id;\n    const initial_status = 1;\n    let categories_id_list = [];\n\n    if (!description) {\n      return 'Description not found';\n    }\n\n    await analyze({\n      text: description\n    })\n    .then(async response => {\n      // get all categories id and set in categories_id_list\n      const categories = response.result.categories.map(categorie => categorie.label);\n      categories_id_list = await categorie_model().findAll({\n        where: {\n          name: categories\n        }\n      }).map(categorie => categorie.categorie_id)\n      console.log('categories_id_list', categories_id_list);\n    });\n    const ticket_model = await ticket().create({\n      user_id,\n      status_id: initial_status,\n      description\n    });\n    await categories_id_list.forEach(async categorie_id => {\n      await ticket_categorie().create({\n        ticket_id: ticket_model.ticket_id,\n        categorie_id\n      })\n    });\n\n    return 'Your ticket was sucefuly created';\n  },\n  async search_ticket (req) {\n    const user_id = req.body.user_id;\n    const ticket_list = await ticket().findAll({\n      where: {\n        user_id\n      }\n    }).map(async ticket => (\n      `${ticket.description} - ${(await ticket.getStatus()).name}<br />`\n    ));\n\n    return ticket_list.join('\\n');\n  }\n}\n"]}